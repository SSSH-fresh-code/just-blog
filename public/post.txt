## 개요
---
해당 글은 Visual Studio Code(이하 VSCode)와 VSCode의 확장중 하나인 DevContainer를 사용하여 Javascript, Typescript 개발 환경을 구성하는 글입니다.

아래와 같은 내용으로 글은 진행됩니다.
- Visual Studio Code 란?
- DevContainer 란?
- Docker를 몰라도 괜찮은가요?
- 왜 DevContainer를 사용해야 하나요?
- 실습
- 정상적으로 개발환경이 세팅되었는지 테스트

글 진행 내용 중 알고있는 내용이라면 스킵하고 실습 내용만 참고하셔도 좋습니다.

## Visual Studio Code란?
---
### IDE(Integrated Development Environment)
---
개발을 위해 우리는 IDE 라는 툴을 씁니다.

아래 사진은 이클립스라는 이름은 IDE로 한국에선 자바 개발에 주로 사용합니다.

![[Pasted image 20240219124841.png]]

직역하자면 통합 개발 환경인 IDE는 말 그대로 우리가 개발에 필요한 종합적인 환경을 제공해주는 툴입니다.

단순한 코드 작성 뿐 아닌 테스트, 디버깅, 컴파일링 등 다양한 기능이 들어있습니다.

지금처럼 GUI 환경이 아닌 CLI 환경이던 옛날 시절엔 아래와 같은 Vim 이나 Emacs 라는 툴을 사용하여 개발 하기도 했습니다.

![[Pasted image 20240219125207.png]]

이는 개발하려는 언어 뿐 아니라 그 툴에 대한 학습도 요구했기에 초보자들에겐 적합하지 않습니다.

(놀랍게도 아직 vim 을 사용해 개발하는 분들은 꽤 있습니다.)

### Vim
---
위 사진 처럼 불편하기 짝이 없어보이지만, 현대의 Vim(NeoVim으로 발전한)은 생각보다 불편하지 않고 오히려 개발 친화적으로 보이기까지 합니다.

(물론 높은 러닝커브는 그대로 입니다.)

![[Pasted image 20240219125542.png]]

여러분들이 사용하는 IDE들에 비하면 투박해보일 수 있습니다. 하지만 개발하기엔 훌륭한 툴입니다.

Vim 자체는 단순한 텍스트 편집기 툴입니다.

하지만 위처럼 Vim을 개발 IDE로 사용하기 위해 플러그인을 만들어 사용합니다.

![[스크린샷 2024-02-20 12.18.55.png]]

위 사이트는 사람들이 자주 쓰는 Vim plugin 들을 모아놓은 사이트입니다.

완벽하지 않지만 크롬 웹 스토어나 핸드폰의 앱 스토어와 비슷하죠.

### 그래서 Visual Studio Code가 뭔가요
---
왜 VSCode를 설명한다 하면서 Vim에 관한 이야기를 하냐~ 라고 생각하실 분들이 있을만한 시점입니다.

저는 VSCode가 Vim 과 매우 유사하다고 생각합니다.

VSCode도 처음 다운 받으면 그저 평범한 텍스트 편집기 입니다.

그냥 텍스트 편집기와 다른 점이 있다면

- js(Web API, Nodejs), ts 를 기본적으로 지원합니다. (built-in support for JavaScript, TypeScript and Node.js)
- 실행 및 디버그 메뉴를 통해 위 언어들에 대한 실행이 가능
- 터미널 내장

이 외에도 우리가 아는 메모장보단 기능이 많습니다.

그리고 제일 중요한건 Vim의 플러그인에 해당하는 확장(Extension) 기능이 있습니다.

![[Pasted image 20240220122725.png]]

[VSCode의 공식 확장 마켓플레이스](https://marketplace.visualstudio.com/VSCode)를 보면 정말 다양한 확장들이 있는걸 볼 수 있습니다.

우리가 처음부터 필요한 확장만을 설치하여 진행 할 수 있다는 것이 큰 장점이라고 생각합니다.

그래서 VSCode가 무엇이냐 한다면

> 확장 가능한 강력한 구조를 가진 IDE라고 생각합니다.

그냥 텍스트 에디터를 쓸거면 조금 투 머치인 느낌이 없지 않아 있긴 합니다.

### 왜 Visual Studio Code 인가요?
---

- TypeScript는 MS에서 주관하여 개발, 유지하고 있습니다.
	- Visual Studio Code 또한 MS에서 주관하여 개발, 유지 중에 있습니다.
- 처음부터 무거운(=기능이 다양한) IDE가 아닌 내가 원하는 확장으로 비교적 쉽게 나만의 IDE를 만들 수 있습니다.
	- 또한 해당 설정들(VSCode나 실제 개발하는 프로젝트까지도)을 손쉽게 공유할 수 있습니다.대게 json 형식의 파일을 이용하여 공유합니다.) 
- DevContainer 기능을 통한 컨테이너 기반 개발이 가능합니다.

이보다 다양한 장점이 있을 수 있고, 단점이 있을 수 있으나 일단 이 세 가지 포인트에 집중하겠습니다.

**TypeScript**
MS에서 만든 JS의 슈퍼셋인 TypeScript는 이제 자바스크립트 프로젝트라면 거의 대부분 채택하고 있습니다.

물론 JS만으로 충분하며 TS가 컴파일 오버헤드가 존재한다는 이유로 JSDoc을 사용하는 경우도 있지만, 이는 예외적인 케이스입니다.

MS에서 만든 툴인 VSCode는 웹 개발에 최적화 되어있습니다. 

VSCode 또한 MS에서 만든 툴이기에 TS를 사용하는 개인이나 회사에게 빠르고 정확한 지원을 기대할 수 있습니다.

**확장(Extension)**
사실 Jetbrains 사의 IDE를 써봤다면 엄청 강력한 기능들이 많다는 걸 알 수 있습니다.

하지만 동시에 그 기능들을 모두 사용하기엔 개발해야할 시간도 부족하죠.

결국 일부 기능만을 쓰게 되는데, 알게모르게 쓰지 않는 기능들을 위해 자원을 사용하고 있습니다.

계속 백그라운드에서 돌고 있는 기능도 있을 것이고, 처음 프로그램 띄울 때 긴 로딩 시간의 원인이 되기도 합니다.

VSCode는 빠릅니다.

일단 프로그램이 켜지고, 프로젝트 파일을 열어 코드를 볼 수 있습니다.

그 뒤에 인덱싱이나 확장 로드를 진행합니다만, 거대한 IDE보다 비교적 빠르다 볼 수 있습니다.

또한 내가 필요한 확장들만 설치하기에 낭비하는 자원도 적을 것이라 기대할 수 있죠


**DevContainer**
말 그대로 컨테이너 환경에서 작업할 수 있습니다.

아직 컨테이너가 뭐고, 그 환경에서 작업하는게 뭐가 좋은건지 잘 모르시는 분들을 위해

해당 주제는 따로 크게 빼겠습니다.


## DevContainer란?
---
먼저 도커나 가상화 기술에 대해서 자세히 설명하지 않을 것을 알려드립니다.

사실 해당 기능 사용을 위해서라면 위 두 가지 개념을 빠삭하게 알 필요 없습니다.

### Docker
---
![[Pasted image 20240220124546.png]]

도커는 내가 실제 사용하는 컴퓨터 안에 가상 환경을 만들어주는 도구입니다.

이 가상 환경을 컨테이너라 하며, 프로그램이나 애플리케이션을 넣을 수 있습니다.

단순히 실제 컴퓨터의 자원을 빌려 가상의 컴퓨터를 띄우는 기술입니다.

지금은 깊게 생각하지 않아도 됩니다.

### DevContainer
---
VSCode의 DevContainer는 위 도커를 사용하여 가상의 개발환경을 만들어주는 기능입니다.

도커의 기능에는 실제 내 컴퓨터안에 있는 경로와 컨테이너 안의 경로를 일치(마운트라고 합니다)시켜 사용할 수 있습니다.

실제 개발 프로젝트 소스는 내 컴퓨터에 있고, 그 프로젝트에 필요한 JavaScript나 TypeScript등의 개발 환경은 가상의 개발환경인 컨테이너에 설치하는 것이죠.

![[Pasted image 20240220125243.png]]

위 그림은 [VSCode 공식 튜토리얼]()에서 가져온 그림입니다.

Local OS는 저희가 사용하는 PC이고 Remote OS는 현재 도커를 이용해 띄운 가상 환경, 즉 컨테이너를 의미합니다.

### devcontainer.json
---
DevContainer 기능은 프로젝트 최상단인 루트 경로에 있는 .devcontainer 디렉터리 내에 devcontainer.json 파일로 설정을 읽어 가상 컨테이너를 실행합니다.

그렇기에 devcontainer.json 명세를 숙지했다면 더욱 쉽게 사용할 수 있습니다.

이 글에선 도커를 모르는 분들도 쉽게 사용할 수 있는 난이도로 설명하기 위해, devcontainer.json 에 대한 명세를 자세히 다루지 않습니다.

[공식 튜토리얼 링크]()를 통해 학습 하실 수 있습니다.

VSCode 공식 튜토리얼에서 제공하는 json 파일은 아래와 같습니다.

이런게 있구나~ 하고 보시면 됩니다.

```json
{
  // 가상 환경의 이름입니다. 이건 각자 원하는대로 설정할 수 있습니다.
  "name": "Node.js",

  // 컨테이너를 띄우기 위한 이미지 파일입니다.
  "image": "mcr.microsoft.com/devcontainers/javascript-node:0-18",

  // 가상 환경의 vscode에 사용할 setting 파일과 확장 파일입니다.
  "customizations": {
    "vscode": {
      "settings": {},
      "extensions": ["streetsidesoftware.code-spell-checker"]
    }
  },

  // 컨테이너가 정상적으로 구동되었을 때 실행 할 명령어
  "postCreateCommand": "yarn install"

  // "remoteUser": "root"
}
```

벌써부터 어려운데?? 하시는 분들은 위에서 말했듯 그냥 이런게 존재 하는구나 하고 생각해주세요.

## 도커를 몰라도 괜찮은가요?
---
도커를 아예 모르는건 문제가 될 수 있습니다.

왜냐면 해당 기능은 실제로 Docker와 Docker Desktop을 설치하고 실행해야 사용할 수 있습니다.

하지만 저희가 도커의 기능을 명령어를 사용하여 직접 조작한다거나

고차원의 지식을 요구하는 기능은 사용하지 않을 것 입니다.

말 그대로 도커의 정의와 이것을 설치하고 실행해놓기만 하면 됩니다.

논외로 저는 도커를 필두로한 컨테이너 환경이 이미 주류로 올라왔다는 생각을 합니다.

기회가 된다면 도커를 꼭 공부하시길 바라겠습니다.

## 왜 DevContainer를 사용해야 하나요?
---
DevContainer를 사용하면 개발 환경을 프로젝트별로 일관되게 설정하고 유지할 수 있습니다. 

이는 다른 환경에서 작업할 때도 프로젝트를 쉽게 이식하고 협업할 수 있게 해줍니다.

> **개발 환경을 일관되게 설정하고 유지 할 수 있습니다.**

도커를 사용해 컨테이너를 만들 때는 이미지라는게 필요합니다.

이미지는 이미 누군가가 설정해둔 개발 환경을 패키징한 것으로, DevContainer는 이미 만들어진 이미지를 사용하여 컨테이너를 생성합니다.

이를 통해 일관된 개발 환경을 빠르게 설정할 수 있습니다.

![[Pasted image 20240220211852.png]]

위 이미지를 통하여 Node.js, TypeScript 외에도 yarn, nestjs, eslint가 이미 세팅되어있는 환경인 컨테이너를 띄우고

그 컨테이너 안에서 개발을 하면 됩니다.

만약 외부 요인이나 개발 중에 개발 환경이 오염되었을 때 그저 단순히 기존 컨테이너를 없애고

다시 위 이미지를 통해 컨테이너를 생성하는 과정을 통해 개발 환경을 일관적이게 유지할 수 있습니다.

> **빠른 프로젝트 세팅**

위 내용과 일맥상통합니다.

이미 만들어진 이미지를 통해 컨테이너를 띄우기만 하면 개발환경이 완성됩니다.

DevContainer의 경우엔 이미 세팅되어있는 .devcontainer.json 파일을 통해 다양한 PC나 기기에서 빠르게 환경을 세팅할 수 있습니다.

> **로컬 PC에 각종 개발 환경 파일을 설치하지 않아도 된다.**

로컬 PC에 각종 개발 환경 파일을 설치하지 않아도 되므로, 다른 개발 환경으로의 전환도 편리하고, 개발 환경이 오염되는 걱정 없이 안정적으로 작업할 수 있습니다.

> **개발환경 공유가 쉽습니다.**

![[Pasted image 20240220213227.png]]

좌 : 제 컴퓨터에선 되는데요?
우 : 네, 하지만 고객에게 당신의 컴퓨터를 드릴 순 없잖아요.

외국에서 유명한 개발 밈인 "제 컴퓨터에선 되는데요?(It works on my computer?) "입니다.

위에서 설명한 장점들을 통해 일관적으로 개발환경을 관리했다면

devcontainer.json 파일을 공유하는 것만으로도 자신의 개발환경을 쉽게 공유할 수 있고, 컨테이너 기반이라 상대 컴퓨터에서도 원활하게 프로젝트가 구동될 것 입니다.

그리고 반대로 다른 사람의 프로젝트에도 해당 파일이 있다면 쉽게 개발환경을 구성하고 프로젝트를 구동할 수 있겠죠?

위 사진과 같은 상황도 방지할 수 있다는 장점이 있네요.

## 실습
---

> **VSCode 설치**

만약 VSCode가 설치되어있다면 이 단계를 건너 뛰어도 좋습니다.

VSCode를 설치하는 방법은 mac인 경우 brew를 이용하는 등 다양한 방법이 있으나, 모든 운영체제에서 사용할 수 있는 방법인 공식 홈페이지를 통한 설치로 하겠습니다.

[VSCode 공식 홈페이지]()에 들어가면 바로 Download 버튼이 있습니다.
![[스크린샷 2024-02-20 오후 9.43.23.PNG]]
설치 파일을 받아 실행해주세요
![[스크린샷 2024-02-20 오후 9.43.37.PNG]]

설치가 끝난 뒤 VSCode를 실행하여 정상 작동하는지 확인해주세요.
![[스크린샷 2024-02-20 오후 9.44.28.PNG]]
위 사진 하단을 보면 언어 팩을 설치하란 안내가 있습니다.

저는 설치하는 것을 추천 드리겠습니다.

![[스크린샷 2024-02-20 오후 9.44.40.PNG]]
VSCode 설치가 끝났다면 이제 Docker를 설치할 차례입니다.

> **Docker 설치**

이 또한 컴퓨터에 이미 Docker가 설치되어있다면 다음 단계로 가셔도 됩니다.
Docker 또한 공식 홈페이지를 통해 다운로드 및 설치를 진행하겠습니다.
![[스크린샷 2024-02-20 오후 9.47.23.PNG]]

공식 홈페이지에 들어가면 위 Product 메뉴에 Docker Desktop을 눌러주세요.

Docker Desktop은 쉽게 Docker를 사용하기 위한 툴입니다.

![[스크린샷 2024-02-20 오후 9.48.09.PNG]]
그러면 메인 페이지에 Download 버튼이 있습니다.

자신의 운영체제에 맞는 버튼이 보이지 않는다면 버튼 우측 아래 화살표 버튼을 눌러 자신의 운영체제를 선택하여 설치를 진행해 주세요.

그리고 Docker(Docker Desktop)를 실행해주세요.
![[스크린샷 2024-02-20 오후 9.50.42.PNG]]
그러면 아래와 같이 Docker Desktop이 실행됩니다.

먼저 Docker Desktop의 사용 약관을 묻는 화면이 나옵니다. Accept를 눌러 동의해주세요. 

![[스크린샷 2024-02-20 오후 10.03.28.PNG]]
그리고 그 후에 도커 데스크탑 세팅을 위한 화면이 나옵니다.

도커 데스크탑에서 추천하는 설정을 사용하기 위해 Use recommended settings를 누르고 Finish를 눌러주세요.

![[스크린샷 2024-02-20 오후 10.03.42.PNG]]



Docker Desktop을 사용하기 위해서 로그인 하라는 문구가 보이네요.

아이디가 없다면 Sign up 버튼 아래에 Sign in 텍스트를 눌러 가입 후 로그인 해주시면 됩니다.

![[스크린샷 2024-02-20 오후 10.04.51.PNG]]
브라우저에 아래와 같은 창이 뜨면서 로그인 과정을 진행하게 됩니다.

![[스크린샷 2024-02-20 오후 10.04.47.PNG]]
![[스크린샷 2024-02-20 오후 10.05.12.PNG]]
위 Proceed to Docker Desktop을 누르시고 Docker Desktop에 돌아오면 Starting the Docker Engine...이라는 문구를 띄웁니다.

해당 문구가 사라질 때 까지 기다려주세요.

![[스크린샷 2024-02-20 오후 10.05.23.PNG]]
아래와 같은 화면이 떴다면 Docker 및 Docker Desktop 설치는 완료되었습니다.

이제 Docker Desktop은 잠시 최소화하고, Visual Studio Code에서 DevContainer를 사용해보겠습니다.

![[스크린샷 2024-02-20 오후 10.11.05.PNG]]
> **DevContainer 설치 및 사용하기**

이제 Visual Studio에서 DevContainer 확장(Extension)을 설치하고 실제 컨테이너를 띄워보겠습니다.

아래와 같은 화면에서 좌측 아이콘 메뉴 중 아래에서 두 번째에 있는 확장(Extension) 버튼을 눌러주세요.

(사진)

그리고 Dev Container를 검색하여 해당 확장을 설치해줍니다.

(사진)

설치가 완료되었다면, Cmd + Shift + P(윈도우라면 Control + Shift + P)를 눌러 DevContainer: Create New Contrainer...를 찾아 눌러주세요.

(사진)

그러면 아래 사진과 같이 개발 컨테이너 구성 선택으로 전환됩니다.

저희는 JavaScript, TypeScript